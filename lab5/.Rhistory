# Plot
pred_age_result %>%
ggplot(aes(x = age_recode, y = fit)) +
geom_line() +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.3) +   # add 95% CI
labs(x = "Age",
y = "Predicted Earnings") +
ggtitle("Predicted Earnings by Age")
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, foreign, stargazer, ggcorrplot, kableExtra)
set.seed(1234)
# Simulate IV (edu level)
edu2 <- rpois(300, lambda = 6) #rpois: Random Poisson Distribution with parameter lamda
# Simulate DV
earn2 <- 10 + 6*edu2 + rnorm(300, 0, 50) # add a random error using rnorm()
# Combine dataframe
df_exercise <- tibble(x_edu = edu2, y_earn = earn2)
# Fit model
m_simu_exercise <- lm(y_earn ~ x_edu, data = df_exercise)
summary(m_simu_exercise)
# Scatterplot
df_exercise %>%
ggplot(aes(x = x_edu, y = y_earn)) +
geom_point(shape = 1, alpha = 0.7) +
geom_smooth(method = "lm") +
labs(title = "Relationship Between Years of Education and Income Rank",
subtitle = "(using simulated data)",
x = "Years of Edu",
y = "Income Rank")
View(df_exercise)
TSS <- (df_exercise$y_earn - mean(df_exercise$y_earn))^2 %>% sum()
TSS
# Create two variables, one is y_mean, one is fitted_y
df_exercise <- df_exercise %>%
mutate(y_mean = mean(df_exercise$y_earn),
y_fitted = -1.402 + 8.255*x_edu)
TSS <- (df_exercise$y_earn - df_exercise$y_mean)^2 %>% sum()
SSE <- (df_exercise$y_earn - df_exercise$y_fitted)^2 %>% sum()
R_sq <- (TSS - SSE)/TSS
R_sq
summary(m_simu_exercise)
# Rho
cor(df_exercise$y_earn, df_exercise$x_edu)
rho = cor(df_exercise$y_earn, df_exercise$x_edu)
rho^2
# se_beta1
MSE <- SSE/(nrow(df_exercise) - 2)
# Create 3 variables: x_mean, y_mean, fitted_y
df_exercise <- df_exercise %>%
mutate(x_mean = mean(df_exercise$x_edu),
y_mean = mean(df_exercise$y_earn),
y_fitted = -1.402 + 8.255*x_edu)
var_x <- (df_exercise$x_edu - df_exercise$x_mean)^2 %>% sum()
var_x
var(df_exercise$x_edu)
sd(df_exercise$x_edu)
(nrow(df_exercise) - 1)*sd(df_exercise$x_edu)^2
denomi <- (df_exercise$x_edu - df_exercise$x_mean)^2 %>% sum()
#Or the denominator is (n-1)sd_x^2: (nrow(df_exercise) - 1)*sd(df_exercise$x_edu)^2
se_beta1 <- sqrt(MSE/denomi)
se_beta1
8.255 + 1.96*1.222
8.255 - 1.96*1.222
# Display
head(earnings_df, 10) %>% kbl("html") %>% kable_classic_2(full_width = T)
earnings_df %>%
ggplot(aes(x = edu, y = earn, color = race)) +
geom_point(shape = 1, alpha = 0.7) +
geom_smooth(method = "lm", se = F)
earnings_df <- earnings_df %>%
mutate(black = ifelse(race == "black", 1, 0),
other = ifelse(race == "other", 1, 0))
# Recode age
earnings_df <- earnings_df %>%
mutate(
age_recode = ifelse(age == 9999,     # if `age` equals 9999,
NA,                  # then let `age_recode` equals NA,
age)                 # else let `age_recode` equals `age` (the original age value)
)
# Recode character variable "sex" to 0/1 dummy "female"
earnings_df <- earnings_df %>%
mutate(
female = ifelse(sex == "female",    # If sex equals to "female"
1,                  # then female (the variable) equals to 1
0)                  # else female (the variable) equals to 0
)
View(earnings_df)
# Import
earnings_df <- read.csv("lab5_earnings.csv", stringsAsFactors = F)
# Display
head(earnings_df, 10) %>% kbl("html") %>% kable_classic_2(full_width = F)
# Recode age
earnings_df <- earnings_df %>%
mutate(
age_recode = ifelse(age == 9999,     # if `age` equals 9999,
NA,                  # then let `age_recode` equals NA,
age)                 # else let `age_recode` equals `age` (the original age value)
)
# Recode character variable "sex" to 0/1 dummy "female"
earnings_df <- earnings_df %>%
mutate(
female = ifelse(sex == "female",    # If sex equals to "female"
1,                  # then female (the variable) equals to 1
0)                  # else female (the variable) equals to 0
)
# Display
head(earnings_df, 10) %>% kbl("html") %>% kable_classic_2(full_width = F)
# Check distribution of key DV: earnings
earnings_df %>%
ggplot() +
geom_histogram(aes(earn),
color = "black", fill = "grey",
binwidth = 10)
# Scatterplot of earnings and education, grouped by gender
earnings_df %>%
ggplot() +
geom_point(aes(x = edu, y = earn, color = sex), shape = 1)
earnings_df <- earnings_df %>%
mutate(black = ifelse(race == "black", 1, 0),
other = ifelse(race == "other", 1, 0))
# Display
head(earnings_df, 10) %>% kbl("html") %>% kable_classic_2(full_width = F)
# Scatterplot of earnings and education, grouped by gender
earnings_df %>%
ggplot(aes(x = edu, y = earn, color = race)) +
geom_point(shape = 1, alpha = 0.7) +
geom_smooth(method = "lm", se = F)
ggsave("scatterplot_race.png", height = 5, width = 7)
# Remove non-numeric variables
earnings_df <- earnings_df %>%
select(-unique_id, -sex, -race, -age)
# Correlation Matrix
## Set use = "complete.obs" to ignore observations with NAs
M <- cor(earnings_df, use = "complete.obs")
# Save the matrix to a dataframe, then use `ggcorrplot` to visualize
# (there are other packages for this task)
ggcorrplot(as.data.frame(M),
hc.order = TRUE,
type = "lower",
lab = TRUE)
View(earnings_df)
2.385 -1.571
-2.385 -1.571
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, foreign, stargazer, ggcorrplot, kableExtra)
save(m5, file = "m5_fordemo.RData")
View(earnings_df)
save(earnings_df, file = "earnings_df.RData")
knitr::opts_chunk$set(echo = TRUE)
# Simulate IV (edu level)
set.seed(4444)
edu_ex <- rpois(300, lambda = 6) #rpois: Random Poisson Distribution with parameter lamda
# Plot histogram of IV
edu_ex %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_histogram(color = "black", fill = "grey", binwidth = 1) +
labs(x = "Years of Edu")
# Summary statistics
summary(edu_ex)
# Simulate DV
set.seed(333)
earn_ex <- 10 + 6*edu + rnorm(300, 0, 50) # add a random error using rnorm()
# Plot histogram of DV
earn_ex %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_histogram(color = "black", fill = "grey", binwidth = 5) +
labs(x = "Income Rank")
# Summary statistics
summary(earn_ex)
# Combine dataframe
df_ex <- tibble(x_edu = edu_ex,
y_earn = earn_ex)
set.seed(4444)
edu_ex <- rpois(300, lambda = 6) #rpois: Random Poisson Distribution with parameter lamda
# Plot histogram of IV
edu_ex %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_histogram(color = "black", fill = "grey", binwidth = 1) +
labs(x = "Years of Edu")
# Summary statistics
summary(edu_ex)
# Simulate DV
set.seed(333)
earn_ex <- 10 + 6*edu + rnorm(300, 0, 50) # add a random error using rnorm()
# Simulate IV (edu level)
set.seed(4444)
edu_ex <- rpois(300, lambda = 6) #rpois: Random Poisson Distribution with parameter lamda
# Plot histogram of IV
edu_ex %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_histogram(color = "black", fill = "grey", binwidth = 1) +
labs(x = "Years of Edu")
# Summary statistics
summary(edu_ex)
# Simulate DV
set.seed(333)
earn_ex <- 10 + 6*edu_ex + rnorm(300, 0, 50) # add a random error using rnorm()
# Plot histogram of DV
earn_ex %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_histogram(color = "black", fill = "grey", binwidth = 5) +
labs(x = "Income Rank")
# Summary statistics
summary(earn_ex)
# Combine dataframe
df_ex <- tibble(x_edu = edu_ex,
y_earn = earn_ex)
df_ex %>%
ggplot(aes(x = edu_ex, y = earn_ex)) +
geom_point(shape = 1, alpha = 0.7) +
geom_smooth(method = "lm") +
labs(title = "Relationship Between Years of Education and Income Rank",
subtitle = "(using simulated data)",
x = "Years of Edu",
y = "Income Rank")
lm(edu_ex, earn_ex, df = df_ex)
lm(edu_ex, earn_ex, data = df_ex)
lm(earn_ex ~ edu_ex, data = df_ex)
set.seed(1234)
# Simulate IV (edu level)
edu2 <- rpois(300, lambda = 6) #rpois: Random Poisson Distribution with parameter lamda
# Simulate DV
earn2 <- 10 + 6*edu2 + rnorm(300, 0, 50) # add a random error using rnorm()
# Combine dataframe
df_exercise <- tibble(x_edu = edu2, y_earn = earn2)
# Fit model
m_simu_exercise <- lm(y_earn ~ x_edu, data = df_exercise)
summary(m_simu_exercise)
# Scatterplot
df_exercise %>%
ggplot(aes(x = x_edu, y = y_earn)) +
geom_point(shape = 1, alpha = 0.7) +
geom_smooth(method = "lm") +
labs(title = "Relationship Between Years of Education and Income Rank",
subtitle = "(using simulated data)",
x = "Years of Edu",
y = "Income Rank")
# Create 3 variables: x_mean, y_mean, fitted_y
df_exercise <- df_exercise %>%
mutate(x_mean = mean(df_exercise$x_edu),
y_mean = mean(df_exercise$y_earn),
y_fitted = -1.402 + 8.255*x_edu)
#TSS
TSS <- (df_exercise$y_earn - df_exercise$y_mean)^2 %>% sum()
TSS
# R-squared
SSE <- (df_exercise$y_earn - df_exercise$y_fitted)^2 %>% sum()
R_sq <- (TSS - SSE)/TSS
R_sq
# Rho
rho = cor(df_exercise$y_earn, df_exercise$x_edu)
rho^2 # is equal to R_sq
# se_beta1
MSE <- SSE/(nrow(df_exercise) - 2)
denomi <- (df_exercise$x_edu - df_exercise$x_mean)^2 %>% sum()
#Or the denominator is (n-1)sd_x^2: (nrow(df_exercise) - 1)*sd(df_exercise$x_edu)^2
se_beta1 <- sqrt(MSE/denomi)
se_beta1
# CI of se_beta1:
#upper: 8.255 + 1.96*1.222 = 10.65012
#lower: 8.255 - 1.96*1.222 = 5.85988
View(df_exercise)
# Import
earnings_df <- read.csv("data/lab5_earnings.csv", stringsAsFactors = F)
# Recode age & sex
earnings_df <- earnings_df %>%
mutate(age_recode = ifelse(age == 9999, NA, age),
female = ifelse(sex == "female", 1, 0))
View(earnings_df)
# Scatterplot of earnings and education, grouped by gender
earnings_df %>%
ggplot(aes(x = edu, y = earn, color = race)) +
geom_point(shape = 1, alpha = 0.7) +
geom_smooth(method = "lm", se = F)
#ggsave("graph/scatterplot_race.png", height = 5, width = 7)
earnings_df %>%
ggplot(aes(x = edu, y = earn, color = race)) +
geom_point(shape = 1, alpha = 0.7) +
geom_smooth(method = "lm", se = F)
earnings_df %>%
ggplot() +
geom_point(aes(x = edu, y = earn, color = race), shape = 1, alpha = 0.7) +
geom_smooth(aes(x = edu, y = earn, color = race), method = "lm", se = F)
# Nested Models
m1 <- lm(earn ~ age_recode,
data = earnings_df)
m2 <- lm(earn ~ age_recode + edu,
data = earnings_df)
m3 <- lm(earn ~ age_recode + edu + female,
data = earnings_df)
m4 <- lm(earn ~ age_recode + edu + female + black + other,
data = earnings_df)
m5 <- lm(earn ~ age_recode + edu + female + black + other + edu*female,
data = earnings_df)
# save(m5, file = "data/m5_fordemo.RData") #save for demo purpose
stargazer(m1, m2, m3, m4, m5, type="text", omit.stat=c("ser", "f"))
knitr::opts_chunk$set(echo = TRUE)
# load package
library(tidyverse)
library(gridExtra)
library(kableExtra)
library(dplyr)
library(formatR)
knitr::opts_chunk$set(echo = TRUE)
# load package
library(tidyverse)
library(gridExtra)
library(kableExtra)
library(dplyr)
library(formatR)
# load package
library(tidyverse)
library(gridExtra)
library(kableExtra)
library(dplyr)
#library(formatR)
# import data
library(readr)
gapminder <- read_csv("gapminder.csv")
parent_inc <- read_csv("parent_inc.csv")
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_"))
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome)
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name), #, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_"))
parent_inc_tidied <- parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name), #, father_income, mother_income),
names_to = c("type", ".value"))#,
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name), #, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_"))
parent_inc_tidied <- parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_"))
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_"))
parent_inc_tidied <- parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name, father_income, mother_income),
names_to = c("type", "value"),
names_sep = ("_"))
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_"))
arent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("."))
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("."))
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name), #, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_"))
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name), #, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_")) %>%
pivot_longer(
cols = c(father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_")
)
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name), #, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_")) %>%
pivot_longer(
cols = c(father_income, mother_income),
names_to = c("type", "income"),
names_sep = ("_")
)
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name), #, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_")) %>%
pivot_longer(
cols = c(father_income, mother_income),
names_to = c("type2", "income"),
names_sep = ("_")
)
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_"))
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome)
parent_inc %>%
# rename fincome and mincome to father_income, mother_income in order to separate
rename(father_income = fincome, mother_income = mincome) %>%
# pivot_longer to create one column for income, one for name, one for type variables, separating cases by gender
pivot_longer(
cols = c(father_name, mother_name, father_income, mother_income),
names_to = c("type", ".value"),
names_sep = ("_"))
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=70), tidy=TRUE, fig.pos = "H", echo = TRUE)
# Loading packages into environment
library(formatR)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=70), tidy=TRUE, fig.pos = "H", echo = TRUE)
# Loading packages into environment
#library(formatR)
library(tidyverse)
library(gridExtra)
library(kableExtra)
# Question #3
# 3.1: Create a population data frame
value <- rnorm(n = 100000, mean = 5, sd = 1) %>% as_tibble()
# 3.3: Draw random sample n=50
set.seed(110001)
sample <- value %>% sample_n(size=50, replace = FALSE)
# 3.5:
#Calculate point estimate for population mean
point_est <- sum(sample)/count(sample)
print(point_est)
# Calculate standard error of point estimate
standard_error <- sapply(sample, sd)/sqrt(length(sample))
print(standard_error)
sapply(sample, sd)
sd(sample)
str(sample)
sd(sample$value)
length(sample)
14.38 -5.105*12.5
5.105*3.59/3.29
5.570502^2
14.38 -10.21*12.5
10.21*3.59/3.29
10.21/3.59*3.29
10.21/(3.59*3.29)
0.8644411^2
10.21/(3.59*3.59)
14.38 - 0.7922037*12.5
