# y-axis labels (\n means "line break")
scale_y_continuous(name = "Predicted Probability\n",
breaks = seq(0, 1, .25)) +
# add labels to the numbers on the x-axis
scale_x_continuous(name = "\nParty ID",
breaks = 0:6,
labels = c("Strong Democrat", "Democrat", "Democrat Leaning",
"Independent",
"Republican Leaning", "Republican", "Strong Republican")) +
# add horizontal lines at zero and one
geom_hline(yintercept = c(0, 1), linetype = 2) +
# change theme
theme_classic() +
# add title
labs(title = "Probability of Voting for Trump by Party ID",
subtitle = "Results from Logistic Regression Model") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
# print plot
print(lreg_fac_plot)
pred_dat_q2 = data.frame(pid_fact = factor(0:6)) %>%
mutate(
linc = mean(dat$linc, na.rm = T),
female = 1, # fix gender at male
college = 1 # fix education at less than BA
)
# predict the logit and standard errors
fpred_logit = predict(
lf_reg,
newdata = pred_dat_q2,
response = "link",
se.fit = TRUE
) %>%
as.data.frame() %>%
select(fit, se.fit)
# calculate 95% CI for logits
fpred_logit = fpred_logit %>%
mutate(lwr = fit - 1.96 * se.fit,
upr = fit + 1.96 * se.fit)
# apply inverse-logit function to get pred. probs and CI
pred_p = fpred_logit %>%
mutate_at(1:4, function(a){1 / (1 + exp(-a))}) %>%
# add the pid variable for plotting
mutate(pid = 0:6)
# plot predicted probabilities (save plot in object fl_plot)
lreg_fac_plot = pred_p %>%
ggplot(aes(x = pid, y = fit)) +
# add line
geom_line(col = "grey50", linetype = 2) +
# add 95% CI at different values of x
geom_errorbar(
aes(ymin = lwr, ymax = upr),
col = "grey50",
width = .15) +    # width of error bar
# point estimates of predicted probabilities
geom_point(col = "black") +
# y-axis labels (\n means "line break")
scale_y_continuous(name = "Predicted Probability\n",
breaks = seq(0, 1, .25)) +
# add labels to the numbers on the x-axis
scale_x_continuous(name = "\nParty ID",
breaks = 0:6,
labels = c("Strong Democrat", "Democrat", "Democrat Leaning",
"Independent",
"Republican Leaning", "Republican", "Strong Republican")) +
# add horizontal lines at zero and one
geom_hline(yintercept = c(0, 1), linetype = 2) +
# change theme
theme_classic() +
# add title
labs(title = "Probability of Voting for Trump by Party ID",
subtitle = "Results from Logistic Regression Model") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
# print plot
print(lreg_fac_plot)
pred_dat_q2 = data.frame(pid_fact = factor(0:6)) %>%
mutate(
linc = median(dat$linc, na.rm = T),
female = 0, # fix gender at male
college = 0 # fix education at less than BA
)
# predict the logit and standard errors
fpred_logit = predict(
lf_reg,
newdata = pred_dat_q2,
response = "link",
se.fit = TRUE
) %>%
as.data.frame() %>%
select(fit, se.fit)
# calculate 95% CI for logits
fpred_logit = fpred_logit %>%
mutate(lwr = fit - 1.96 * se.fit,
upr = fit + 1.96 * se.fit)
# apply inverse-logit function to get pred. probs and CI
pred_p = fpred_logit %>%
mutate_at(1:4, function(a){1 / (1 + exp(-a))}) %>%
# add the pid variable for plotting
mutate(pid = 0:6)
# plot predicted probabilities (save plot in object fl_plot)
lreg_fac_plot = pred_p %>%
ggplot(aes(x = pid, y = fit)) +
# add line
geom_line(col = "grey50", linetype = 2) +
# add 95% CI at different values of x
geom_errorbar(
aes(ymin = lwr, ymax = upr),
col = "grey50",
width = .15) +    # width of error bar
# point estimates of predicted probabilities
geom_point(col = "black") +
# y-axis labels (\n means "line break")
scale_y_continuous(name = "Predicted Probability\n",
breaks = seq(0, 1, .25)) +
# add labels to the numbers on the x-axis
scale_x_continuous(name = "\nParty ID",
breaks = 0:6,
labels = c("Strong Democrat", "Democrat", "Democrat Leaning",
"Independent",
"Republican Leaning", "Republican", "Strong Republican")) +
# add horizontal lines at zero and one
geom_hline(yintercept = c(0, 1), linetype = 2) +
# change theme
theme_classic() +
# add title
labs(title = "Probability of Voting for Trump by Party ID",
subtitle = "Results from Logistic Regression Model") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
# print plot
print(lreg_fac_plot)
# plot predicted probabilities (save plot in object fl_plot)
lreg_fac_plot = pred_p %>%
ggplot(aes(x = pid, y = fit)) +
# add line
geom_line(col = "grey50", linetype = 2) +
# add 95% CI at different values of x
geom_errorbar(
aes(ymin = lwr, ymax = upr),
col = "grey50",
width = .15) +    # width of error bar
# point estimates of predicted probabilities
geom_point(col = "black") +
# y-axis labels (\n means "line break")
scale_y_continuous(name = "Predicted Probability\n",
breaks = seq(0, 1, .25)) +
# add labels to the numbers on the x-axis
scale_x_continuous(name = "\nParty ID",
breaks = 0:6,
labels = c("Strong Democrat", "Democrat", "Democrat Leaning",
"Independent",
"Republican Leaning", "Republican", "Strong Republican")) +
# add horizontal lines at zero and one
geom_hline(yintercept = c(0, 1), linetype = 2) +
# change theme
theme_classic() +
# add title
labs(title = "Probability of Voting for Trump by Party ID",
subtitle = "Results from Logistic Regression Model (linc = median, fem = 0, col = 0") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
# print plot
print(lreg_fac_plot)
# plot predicted probabilities (save plot in object fl_plot)
lreg_fac_plot = pred_p %>%
ggplot(aes(x = pid, y = fit)) +
# add line
geom_line(col = "grey50", linetype = 2) +
# add 95% CI at different values of x
geom_errorbar(
aes(ymin = lwr, ymax = upr),
col = "grey50",
width = .15) +    # width of error bar
# point estimates of predicted probabilities
geom_point(col = "black") +
# y-axis labels (\n means "line break")
scale_y_continuous(name = "Predicted Probability\n",
breaks = seq(0, 1, .25)) +
# add labels to the numbers on the x-axis
scale_x_continuous(name = "\nParty ID",
breaks = 0:6,
labels = c("Strong Democrat", "Democrat", "Democrat Leaning",
"Independent",
"Republican Leaning", "Republican", "Strong Republican")) +
# add horizontal lines at zero and one
geom_hline(yintercept = c(0, 1), linetype = 2) +
# change theme
theme_classic() +
# add title
labs(title = "Probability of Voting for Trump by Party ID",
subtitle = "Results from Logistic Regression Model (linc = median, fem = 0, col = 0)") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5))
# print plot
print(lreg_fac_plot)
covid_df <- read.csv("data/covid.csv")
# Create counterfactuals
set.seed(1234)
n = nrow(covid_df)
e <- rnorm(n, 0, 0.5)
covid_df_new <- covid_df %>%
# a new counterfactual treatment status:
# if a unit is treated, its counterfactual is control, and vice versa
mutate(vaccine_ctf = ifelse(vaccine == 1, 0, 1),
# then, calculate the counterfactual Y
covid_ctf = rescale(0 - 7*vaccine_ctf - 2*info + e, to = c(0, 100)))
# Mean of observed_treatment
mean(covid_df_new[covid_df_new$vaccine == 1,]$covid_risk)
# Mean observed_control
mean(covid_df_new[covid_df_new$vaccine == 0,]$covid_risk)
# Mean of counterfactual_treatment
mean(covid_df_new[covid_df_new$vaccine == 1,]$covid_ctf)
# Mean of counterfactual_control
mean(covid_df_new[covid_df_new$vaccine == 0,]$covid_ctf)
View(covid_df)
View(covid_df_new)
mean(covid_df_new$covid_risk)
# Mean of Y_c
mean(covid_df_new$covid_ctf)
mean(covid_df_new$covid_risk) - mean(covid_df_new$covid_ctf)
View(covid_df)
# ATE
covid_df_new = covid_df_new %>%
(mutate(y0 = ifelse(vaccine == 1, vaccine_ctf, vaccine),
y1 = ifelse(vaccine == 0, vaccine_ctf, vaccine)))
# ATE
covid_df_new = covid_df_new %>%
(mutate(y0 = ifelse(vaccine == 1, covid_ctf, covid_risk),
y1 = ifelse(vaccine == 1, covid_risk, covid_ctf)))
# ATE
covid_df_new = covid_df_new %>%
mutate(y0 = ifelse(vaccine == 1, covid_ctf, covid_risk),
y1 = ifelse(vaccine == 1, covid_risk, covid_ctf))
View(covid_df_new)
mean(covid_df_new$y1) - mean(covid_df_new$y0)
set.seed(1234)
n = nrow(covid_df)
e <- rnorm(n, 0, 0.5)
covid <- covid %>%
# first, calculate the counterfactual Y
mutate(covid_ctf = rescale(0 - 7*(1 - vaccine) - 2*info + e, to = c(0, 100))) %>%
# second, create y_c and y_t
mutate(y_c = ifelse(vaccine == 1, covid_ctf, covid_risk),
y_t = ifelse(vaccine == 1, covid_risk, covid_ctf))
covid <- read.csv("data/covid.csv")
# Create counterfactuals
set.seed(1234)
n = nrow(covid)
e <- rnorm(n, 0, 0.5)
covid <- covid %>%
# first, calculate the counterfactual Y
mutate(covid_ctf = rescale(0 - 7*(1 - vaccine) - 2*info + e, to = c(0, 100))) %>%
# second, create y_c and y_t
mutate(y_c = ifelse(vaccine == 1, covid_ctf, covid_risk),
y_t = ifelse(vaccine == 1, covid_risk, covid_ctf))
# ATE
mean(covid_df_new$y_t) - mean(covid_df_new$y_c)
# ATE
mean(covid$y_t) - mean(covid$y_c)
# Mean of observed_treatment
mean(covid[covid$vaccine == 1,]$covid_risk)
# Mean observed_control:
mean(covid[covid$vaccine == 0,]$covid_risk)
# Mean of counterfactual_treatment
mean(covid[covid$vaccine == 1,]$covid_ctf)
# Mean of counterfactual_control
mean(covid[covid$vaccine == 0,]$covid_ctf)
mean(covid$y_t)
mean(covid$y_c)
45.1 - 62.0
knitr::opts_chunk$set(echo = TRUE)
# Load packages here
library(pacman)
p_load(tidyverse, stargazer, kableExtra, gridExtra, QuantPsyc, coefplot, sandwich, lmtest, ggthemes)
covid <- read.csv("covid.csv")
library("scales")
set.seed(1234) # set the same seed to ensure identical results
e = rnorm(1000, 0, 0.5)
covid = covid %>%
mutate(y_c =
ifelse(vaccine == 1, rescale(0 - 7 * 0 - 2 * info + e, to = c(0, 100)
)
, covid_risk)) %>% # outcomes for counterfactual for control group
# and observed who are not treated
mutate(y_t =
ifelse(vaccine == 0, rescale(0 - 7 * 1 - 2 * info + e, to = c(0, 100)
)
, covid_risk)) # outcomes for counterfactual for treatment group
# and observed who are treated
View(covid)
knitr::opts_chunk$set(echo = TRUE,
fig.align = "center",
fig.width = 6,
fig.height = 4,
letina = TRUE)
# Load packages here
library(pacman)
p_load(tidyverse, stargazer, scales, lmtest, sandwich, ggthemes)
covid <- read.csv("data/covid.csv")
View(covid)
covid <- read.csv("data/covid.csv")
View(covid)
covid <- read.csv("covid.csv")
covid <- read.csv("data/covid.csv")
library("scales")
set.seed(1234) # set the same seed to ensure identical results
e = rnorm(1000, 0, 0.5)
covid = covid %>%
mutate(y_c =
ifelse(vaccine == 1, rescale(0 - 7 * 0 - 2 * info + e, to = c(0, 100)
)
, covid_risk)) %>% # outcomes for counterfactual for control group
# and observed who are not treated
mutate(y_t =
ifelse(vaccine == 0, rescale(0 - 7 * 1 - 2 * info + e, to = c(0, 100)
)
, covid_risk)) # outcomes for counterfactual for treatment group
# and observed who are treated
View(covid)
covid2 <- read.csv("data/covid.csv")
# Create counterfactuals
set.seed(1234)
n = nrow(covid)
e <- rnorm(n, 0, 0.5)
covid2 <- covid2 %>%
# first, calculate the counterfactual Y
mutate(covid_ctf = rescale(0 - 7*(1 - vaccine) - 2*info + e, to = c(0, 100))) %>%
# second, create y_c and y_t
mutate(y_c = ifelse(vaccine == 1, covid_ctf, covid_risk),
y_t = ifelse(vaccine == 1, covid_risk, covid_ctf))
View(covid2)
View(covid)
View(covid2)
covid <- read.csv("data/covid.csv")
library("scales")
set.seed(1234) # set the same seed to ensure identical results
e = rnorm(1000, 0, 0.5)
covid = covid %>%
mutate(y_c =
ifelse(vaccine == 1,
rescale(0 - 7 * 0 - 2 * info + e, to = c(0, 100)),
covid_risk)
) %>% # outcomes for counterfactual for control group
# and observed who are not treated
mutate(y_t =
ifelse(vaccine == 0,
rescale(0 - 7 * 1 - 2 * info + e, to = c(0, 100)),
covid_risk)
) # outcomes for counterfactual for treatment group
# and observed who are treated
covid = covid %>%
mutate(y_ctf = rescale(0 - 7 * (1 - vaccine) - 2 * info + e, to = c(0, 100)))
View(covid)
View(covid)
covid3 = covid %>%
mutate(y_c =
ifelse(vaccine == 1,
rescale(0 - 7 * 0 - 2 * info + e, to = c(0, 100)),
covid_risk),
y_t =
ifelse(vaccine == 0,
rescale(0 - 7 * 1 - 2 * info + e, to = c(0, 100)),
covid_risk)
) # outcomes for counterfactual for treatment group
View(covid3)
View(covid2)
View(covid3)
covid = covid %>%
mutate(y_c =
ifelse(vaccine == 1,
0 - 7 * 0 - 2 * info + e,
covid_risk)
) %>% # outcomes for counterfactual for control group
# and observed who are not treated
mutate(y_t =
ifelse(vaccine == 0,
0 - 7 * 1 - 2 * info + e,
covid_risk)
) # outcomes for counterfactual for treatment group
# and observed who are treated
covid3 = covid %>%
mutate(y_ctf = 0 - 7 * (1 - vaccine) - 2 * info + e)
View(covid)
View(covid3)
covid <- read.csv("data/covid.csv")
library("scales")
set.seed(1234) # set the same seed to ensure identical results
e = rnorm(1000, 0, 0.5)
covid2 = covid %>%
mutate(y_c =
ifelse(vaccine == 1,
0 - 7 * 0 - 2 * info + e,
covid_risk)
) %>% # outcomes for counterfactual for control group
# and observed who are not treated
mutate(y_t =
ifelse(vaccine == 0,
0 - 7 * 1 - 2 * info + e,
covid_risk)
) # outcomes for counterfactual for treatment group
# and observed who are treated
covid3 = covid %>%
mutate(y_ctf = 0 - 7 * (1 - vaccine) - 2 * info + e)
View(covid2)
View(covid3)
knitr::opts_chunk$set(echo = TRUE)
require(readr)
require(pacman)
require(dplyr)
require(tidyr)
require(ggplot2)
require(broom) # for heteroskedasticity
require(kableExtra) # for our dataframe with all predictor variables
require(stargazer)
require(lmtest) # for coeftest
require(sandwich)
library(readr)
library(pacman)
library(dplyr)
library(tidyr)
library(ggplot2)
library(broom) # for heteroskedasticity
library(kableExtra) # for our dataframe with all predictor variables
library(stargazer)
library(lmtest) # for coeftest
library(sandwich) # for vhoc in coeftest
gss = read_csv("data/gss.csv")
# Extract counts of each value of abortion: -1, 0, 1
counts = table(gss$abortion)
# Plot the distributon
barplot(counts, main = "Should a Woman be able to Have Legal Abortion?",
names.arg = c("No", "It Depends", "Yes")     # rename x values -1, 0, 1
)
# Model 1 without interaction term
m1 = lm(abortion ~ female + pid + college + linc + mar, data = gss)
# Model 2 with interaction term
m2 = lm(abortion ~ female + pid + college + linc + mar + female*pid, data = gss)
# Model 1
# Estimate Linear Probability Model using same method as a regular linear model
lpm = lm(trump ~ female + pid + college + linc,
data = gss)
# Model 2
# Fit logistic regression model (glm)
lreg = glm(trump ~ female + pid + college + linc,
family = binomial(link = "logit"),     # specify this for logistic
data = gss)
# Model 3
# Treat pid as an ordered categorical variable
gss$pid = ordered(gss$pid, levels = c(0, 1, 2, 3, 4, 5, 6),
labels = c("Strong Democrat", "Democrat", "Democrat Leaning",
"Independent", "Republican Leaning", "Republican",
"Strong Republican")
)
# Fit logistic regression model with pid as an ordered categorical variable
fitted_lreg = glm(trump ~ female + college + linc + pid,
family = binomial(link = "logit"),
data = gss)
View(gss)
summary(fitted_lreg)
str(gss$pid)
View(gss)
summary(fitted_lreg)
summary(gss$pid)
View(lreg)
View(fitted_lreg)
fitted_lreg = glm(trump ~ female + college + linc + pid,
family = binomial(link = "logit"),
data = gss)
summary(fitted_lreg)
fitted_lreg2 = glm(trump ~ female + college + linc + factor(pid),
family = binomial(link = "logit"),
data = gss)
summary(fitted_lreg2)
gss = read_csv("data/gss.csv")
fitted_lreg2 = glm(trump ~ female + college + linc + factor(pid),
family = binomial(link = "logit"),
data = gss)
summary(fitted_lreg2)
summary(fitted_lreg)
library(readr)
library(pacman)
library(dplyr)
library(tidyr)
library(ggplot2)
library(broom) # for heteroskedasticity
library(kableExtra) # for our dataframe with all predictor variables
library(stargazer)
library(lmtest) # for coeftest
library(sandwich) # for vhoc in coeftest
gss = read_csv("~/Ps3/data/gss.csv")
gss = read_csv("data/gss.csv")
View(gss)
class(gss$pid)
# Model 3
# Treat pid as an ordered categorical variable
gss$pid = ordered(gss$pid, levels = c(0, 1, 2, 3, 4, 5, 6),
labels = c("Strong Democrat", "Democrat", "Democrat Leaning",
"Independent", "Republican Leaning", "Republican",
"Strong Republican")
)
class(gss$pid)
str(gss$pid)
# Fit logistic regression model with pid as an ordered categorical variable
fitted_lreg = glm(trump ~ female + college + linc + pid,
family = binomial(link = "logit"),
data = gss)
summary(fitted_lreg)
gss = read_csv("data/gss.csv")
fitted_lreg = glm(trump ~ female + college + linc + as.factor(pid),
family = binomial(link = "logit"),
data = gss)
summary(fitted_lreg)
covid = read_csv("data/covid.csv")
View(covid)
pt(q = 3, df = 100, lower.tail = FALSE)
pt(q = 3, df = 100, lower.tail = T)
