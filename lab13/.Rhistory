summary(lm_treat2)
stargazer(lm_treat1, lm_treat2, type="text",
omit.table.layout = "sn", star.char = c("+", "*", "**", "***"),
star.cutoffs = c(0.1, 0.05, 0.01, 0.001))
View(dta_m)
class(dta_m)
class(mod_match)
# two sample t-test
with(dta_m, t.test(c5r2mtsc_std ~ catholic))
0.2096679 - 0.3593668
#import data
ecls <- read.csv("ecls.csv") # the Early Childhood Longitudinal Study
# Check difference in means by school type
ecls %>%
group_by(catholic) %>%
summarise(n_students = n(),
mean_math = mean(c5r2mtsc_std),
std_error_math = sd(c5r2mtsc_std) / sqrt(n_students))
# Two Sample t-test: (H0: mean math scores do not differ by school types)
with(ecls, t.test(c5r2mtsc_std ~ catholic))
# Check difference in means for pre-treatment covariates by school types
# summarise group means for covariates
ecls %>%
group_by(catholic) %>%
select(one_of(ecls_cov)) %>%
summarise_all(funs(mean(., na.rm = T)))
# Two sample t-test for every covariate
# covariates variable name vector
ecls_cov <- c('race_white', 'p5hmage', 'w3income', 'p5numpla', 'w3momed_hsb')
# lapply: a build-in loop that apply the t-test function along the name vector
lapply(ecls_cov, function(v) {
t.test(ecls[, v] ~ ecls[, 'catholic'])
})
# All the t-tests have small p-value, which means the two groups are not balanced
mean <- mean(wt_example$INCWAGE)
var <- var(wt_example$INCWAGE)
sd <- sd(wt_example$INCWAGE)
# weighted mean, var, and sd
wt_mean <- weighted.mean(wt_example$INCWAGE, wt_example$PERWT)
wt_var <- weighted_var(wt_example$INCWAGE, wt_example$PERWT)
wt_sd <- weighted_sd(wt_example$INCWAGE, wt_example$PERWT)
# Compare
tibble(Statistics = c("Mean", "Var", "SD"),
Unweighted = c(mean, var, sd),
Weighted = c(wt_mean, wt_var, wt_ds)) %>%
kbl("html") %>%
kable_classic_2(full_width = F)
# Compare
tibble(Statistics = c("Mean", "Var", "SD"),
Unweighted = c(mean, var, sd),
Weighted = c(wt_mean, wt_var, wt_sd)) %>%
kbl("html") %>%
kable_classic_2(full_width = F)
mean <- mean(wt_example$INCWAGE) %>% round(3)
var <- var(wt_example$INCWAGE) %>% round(3)
sd <- sd(wt_example$INCWAGE) %>% round(3)
# weighted mean, var, and sd
wt_mean <- weighted.mean(wt_example$INCWAGE, wt_example$PERWT) %>% round(3)
wt_var <- weighted_var(wt_example$INCWAGE, wt_example$PERWT) %>% round(3)
wt_sd <- weighted_sd(wt_example$INCWAGE, wt_example$PERWT) %>% round(3)
# Compare
tibble(Statistics = c("Mean", "Var", "SD"),
Unweighted = c(mean, var, sd),
Weighted = c(wt_mean, wt_var, wt_sd)) %>%
kbl("html") %>%
kable_classic_2(full_width = F)
# weighted mean, var, and sd
wt_mean <- weighted.mean(wt_example$INCWAGE, wt_example$PERWT) %>% round(3)
wt_mean
# -------1. Numeric variables-------
# unweighted mean, var, and sd
mean <- mean(wt_example$INCWAGE) %>% round(3)
mean
# Compare
scipan(999)
# Compare
scipen(999)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(pacman)
p_load(tidyverse, data.table, foreign, stargazer, kableExtra, gridExtra, MatchIt, AER, TAM)
options(scipen = 999)
# Compare results
stargazer(m1, m2, type = "text", column.labels = c("Unweighted", "Weighted"))
# Compare results
stargazer(m1, m2,
type = "text",
column.labels = c("Unweighted", "Weighted"),
dep.var.labels = "Log Wage")
View(ecls)
View(prs_df)
library(MASS)
matrix(c(1, 0.1, 0.1, 1),
nrow = 2)
mvrnorm(n = 500,
mu = c(0, 0),
Sigma = matrix(c(1, 0.1, 0.1, 1),
nrow = 2),
empirical = TRUE)
c <- mvrnorm(n = 500,
mu = c(0, 0),
Sigma = matrix(c(1, 0.1, 0.1, 1),
nrow = 2),
empirical = TRUE)
class(c)
mvrnorm(n=10, mu = c(0,0,0), Sigma = diag(3))
Sigma = diag(3)
diag(3)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(pacman)
p_load(tidyverse, data.table, foreign, stargazer, kableExtra, gridExtra, MatchIt, AER, TAM)
options(scipen = 999)
#import data
ecls <- read.csv("data/ecls.csv") # the Early Childhood Longitudinal Study
# covariates variable name vector
ecls_cov <- c('race_white', 'p5hmage', 'w3income', 'p5numpla', 'w3momed_hsb')
# Check difference in means by school type
ecls %>%
group_by(catholic) %>%
summarise(n_students = n(),
mean_math = mean(c5r2mtsc_std),
std_error_math = sd(c5r2mtsc_std) / sqrt(n_students)) %>%
kbl("html") %>%
kable_classic_2(full_width = F)
# Two Sample t-test: (H0: mean math scores do not differ by school types)
with(ecls, t.test(c5r2mtsc_std ~ catholic))
# Check difference in means for pre-treatment covariates by school types
# summarise group means for covariates
ecls %>%
group_by(catholic) %>%
select(one_of(ecls_cov)) %>%
summarise_all(funs(mean(., na.rm = T))) %>%
kbl("html") %>%
kable_classic_2(full_width = F)
# Two sample t-test for every covariate
# lapply: a build-in loop that apply the t-test function along the name vector
lapply(ecls_cov, function(v) {
t.test(ecls[, v] ~ ecls[, 'catholic'])
})
# MatchIt does not allow missing values,
# so we need to remove observations with NAs
ecls_nomiss <- ecls %>%
select(c5r2mtsc_std, catholic, all_of(ecls_cov)) %>%
na.omit()
# Nearest neighbor matching (see documentation for different matching methods)
mod_match <- matchit(catholic ~ race_white + w3income + p5hmage + p5numpla + w3momed_hsb,
method = "nearest", data = ecls_nomiss)
# To create a dataframe containing only the matched observations
dta_m <- match.data(mod_match)
# A plotting function that plots the distribution of propensity score of a given covariate
fn_bal <- function(dta, variable, yname) {
dta$variable <- dta[, variable]
if (variable == 'w3income') dta$variable <- dta$variable / 10^3
dta$catholic <- as.factor(dta$catholic)
support <- c(min(dta$variable), max(dta$variable))
ggplot(dta, aes(x = distance, y = variable, color = catholic)) +
geom_point(alpha = 0.2, size = 1.3) +
geom_smooth(method = "loess", se = F) +
xlab("Propensity score") +
ylab(yname) +
theme_bw() +
ylim(support)
}
# Plot and arrange the plots
grid.arrange(
fn_bal(dta_m, "w3income", "Family Income"),
fn_bal(dta_m, "p5numpla", "Num Places Lived"),
fn_bal(dta_m, "p5hmage", "Mother Age"),
fn_bal(dta_m, "w3momed_hsb", "Mom Edu HS or Less"),
fn_bal(dta_m, "race_white", "Race is White"),
nrow = 3)
# You can also check difference-in-means in matched data
dta_m %>%
group_by(catholic) %>%
select(one_of(ecls_cov)) %>%
summarise_all(funs(mean)) %>%
kbl("html") %>%
kable_classic_2(full_width = F)
# two sample t-test
lapply(ecls_cov, function(v) {
t.test(dta_m[, v] ~ dta_m$catholic)
})
# Rescale income
ecls <- ecls %>% mutate(w3income_1k = w3income/1000) # mutate: add new variables
# Fit a logistic regress to generate propensity score using covariates
# Note we assume that there is no unobserved covariates, which can be a limitation
# Compared to OLS, the propsensity score relaxes some of the linear assumptions.
m_ps <- glm(catholic ~ race_white + w3income_1k + p5hmage + p5numpla + w3momed_hsb,
family = binomial(), data = ecls)
summary(m_ps)
# Use above model to generate propensity
# (the probability of being treated given a set of pre-treatment covariates)
prs_df <- data.frame(pr_score = predict(m_ps, type = "response"),
catholic = m_ps$model$catholic)
head(prs_df) %>%
kbl("html") %>%
kable_classic_2(full_width = F)
# Check the region of common support
# In every unit in the treatment, is there a control unit?
prs_df %>%
ggplot(aes(x = pr_score, fill = as.factor(catholic))) +
geom_histogram(binwidth = 0.02, alpha = 0.5, position="identity") +
ggtitle("Probability of Going to Catholic School") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_manual(name=" ",
values = c("blue", "red"),
labels = c("Public", "Catholic"))
# blue: control group: red: treatment group
# 1. Two sample t-test
with(dta_m, t.test(c5r2mtsc_std ~ catholic))
# mean in group 0: 0.3593668
# mean in group 1: 0.2096679
# ATE = 0.2096679 - 0.3593668 = -0.1496989
# 2. OLS model
# no covariates
lm_treat1 <- lm(c5r2mtsc_std ~ catholic, data = dta_m)
# with covariates
lm_treat2 <- lm(c5r2mtsc_std ~ catholic + race_white + p5hmage +
I(w3income / 10^3) + p5numpla + w3momed_hsb, data = dta_m)
# display models
stargazer(lm_treat1, lm_treat2, type="text",
omit.table.layout = "sn", star.char = c("+", "*", "**", "***"),
star.cutoffs = c(0.1, 0.05, 0.01, 0.001))
library(pacman)
p_load(tidyverse, data.table, stargazer, kableExtra, gridExtra, MatchIt, PSweight)
options(scipen = 999)
# To create a dataframe containing only the matched observations
dta_m <- match.data(mod_match)
# A plotting function that plots the distribution of propensity score of a given covariate
fn_bal <- function(dta, variable, yname) {
dta$variable <- dta[, variable]
if (variable == 'w3income') dta$variable <- dta$variable / 10^3
dta$catholic <- as.factor(dta$catholic)
support <- c(min(dta$variable), max(dta$variable))
ggplot(dta, aes(x = distance, y = variable, color = catholic)) +
geom_point(alpha = 0.2, size = 1.3) +
geom_smooth(method = "loess", se = F) +
xlab("Propensity score") +
ylab(yname) +
theme_bw() +
ylim(support)
}
# Plot and arrange the plots
grid.arrange(
fn_bal(dta_m, "w3income", "Family Income"),
fn_bal(dta_m, "p5numpla", "Num Places Lived"),
fn_bal(dta_m, "p5hmage", "Mother Age"),
fn_bal(dta_m, "w3momed_hsb", "Mom Edu HS or Less"),
fn_bal(dta_m, "race_white", "Race is White"),
nrow = 3)
# You can also check difference-in-means in matched data
dta_m %>%
group_by(catholic) %>%
select(one_of(ecls_cov)) %>%
summarise_all(funs(mean)) %>%
kbl("html") %>%
kable_classic_2(full_width = F)
# two sample t-test
lapply(ecls_cov, function(v) {
t.test(dta_m[, v] ~ dta_m$catholic)
})
ipw1<-PSweight(ps.formula = ps.formula, zname = "catholic", data = ecls_nomiss, weight = 'IPW')
install.packages('PSweight')
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(pacman)
p_load(tidyverse, data.table, stargazer, kableExtra, gridExtra, MatchIt, PSweight)
options(scipen = 999)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(pacman)
p_load(tidyverse, data.table, stargazer, kableExtra, gridExtra, MatchIt, PSweight)
options(scipen = 999)
options(install.packages.check.source = "no")
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(pacman)
p_load(tidyverse, data.table, stargazer, kableExtra, gridExtra, MatchIt, PSweight)
options(scipen = 999)
options(install.packages.check.source = "no")
options(install.packages.check.source = "no")
install.packages('PSweight')
?install.packages
install.packages('PSweight', repos = 'https://cran.rstudio.com/src/contrib/PSweight_1.1.6.tar.gz')
install.packages('gam’)
install.packages('gam’)
install.packages('gam’)
install.packages('gam’)
install.packages('gam’)
install.packages("gam")
]
)
""
''
)(ladjfl)
""
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(pacman)
p_load(tidyverse, data.table, stargazer, kableExtra, gridExtra, MatchIt, PSweight)
options(scipen = 999)
install.packages('gam')
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(pacman)
p_load(tidyverse, data.table, stargazer, kableExtra, gridExtra, MatchIt, PSweight)
options(scipen = 999)
ps.formula <- c5r2mtsc_std ~ catholic + race_white + p5hmage +
I(w3income / 10^3) + p5numpla + w3momed_hsb
# without augmentation
ipw1<-PSweight(ps.formula = ps.formula, zname = "catholic", data = ecls_nomiss, weight = 'IPW')
ipw1<-PSweight(ps.formula = ps.formula, yname = "Y" , zname = "catholic", data = ecls_nomiss, weight = 'IPW')
ipw1<-PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std" , zname = "catholic", data = ecls_nomiss, weight = 'IPW')
View(ecls)
ipw1<-PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std" , zname = "catholic", data = ecls_nomiss, weight = 'IPW')
bal.ipw <- SumStat(ps.formula = ps.formula, +
weight = c("IPW", "matching"), data = ecls_nomiss)
bal.ipw <- SumStat(ps.formula = ps.formula,
weight = c("IPW", "matching"), data = ecls_nomiss)
?SumStata
?SumStat
View(ecls_nomiss)
ps.formula <- c5r2mtsc_std ~ catholic + race_white + p5hmage +
I(w3income / 10^3) + p5numpla + w3momed_hsb
bal.ipw <- SumStat(ps.formula = ps.formula, zname ="catholic"
weight = c("IPW", "matching"), data = ecls_nomiss)
ps.formula <- c5r2mtsc_std ~ catholic + race_white + p5hmage +
I(w3income / 10^3) + p5numpla + w3momed_hsb
bal.ipw <- SumStat(ps.formula = ps.formula, zname ="catholic",
weight = c("IPW", "matching"), data = ecls_nomiss)
ps.formula <- c5r2mtsc_std ~ catholic + race_white + p5hmage +
I(w3income / 10^3) + p5numpla + w3momed_hsb
bal.ipw <- SumStat(ps.formula = ps.formula, zname ="catholic",
weight = c("IPW", data = ecls_nomiss)
plot(bal.ipw, type = "density")
bal.ipw <- SumStat(ps.formula = ps.formula, zname ="catholic",
weight = c("IPW"), data = ecls_nomiss)
bal.ipw <- SumStat(ps.formula = ps.formula, zname ="catholic",
weight = c("IPW"), data = ecls_nomiss, nnet.MaxNWts = 2000))
ps.formula <- catholic ~ race_white + p5hmage +
I(w3income / 10^3) + p5numpla + w3momed_hsb
bal.ipw <- SumStat(ps.formula = ps.formula, zname ="catholic",
weight = c("IPW"), data = ecls_nomiss)
plot(bal.ipw, type = "density")
?plot
?plot.SumStat
plot(bal.ipw, metric = "ASD")
ate.ipw <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss,
weight = "IPW")
sum.ate <- summary(ate.ipw)
sum.ate
ate.ipw <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "IPW")
sum.ate <- summary(ate.ipw)
sum.ate
ate.ipw <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "IPW")
sum.ate <- summary(ate.ipw)
sum.ate
ate.ipw <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "matching")
sum.ate <- summary(ate.ipw)
sum.ate
ate.ipw <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "matching")
sum.ate <- summary(ate.ipw)
ate.match <-
ate.ipw <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "matching")
sum.ate <- summary(ate.ipw)
ate.overlap <- yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
ate.ipw <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "matching")
sum.ate <- summary(ate.ipw)
ate.overlap <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "overlap")
ate.match <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "IPW")
sum.ipw <- summary(ate.ipw)
sum.overlap <- summary(ate.overlap)
sum.match <- summary(ate.match)
ate.ipw <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "matching")
sum.ate <- summary(ate.ipw)
ate.overlap <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "overlap")
ate.match <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "IPW")
summary(ate.ipw)
summary(ate.overlap)
summary(ate.match)
ate.match <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "matching")
sum.ate <- summary(ate.ipw)
ate.overlap <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "overlap")
ate.ipw <- PSweight(ps.formula = ps.formula, yname = "c5r2mtsc_std", data = ecls_nomiss, family = "gaussian",
weight = "IPW")
summary(ate.match)
summary(ate.overlap)
summary(ate.ipw)
ps.formula <- catholic ~ race_white + p5hmage +
I(w3income / 10^3) + p5numpla + w3momed_hsb
bal.ipw <- SumStat(ps.formula = ps.formula, zname ="catholic",
weight = c("matching", "overlap", 'IPW'), data = ecls_nomiss)
# check overlap
plot(bal.ipw, type = "density")
# check balance
plot(bal.ipw, metric = "ASD")
View(bal.ipw)
bal.ipw[["ps.weights"]][["overlap"]]
bal.ipw[["ps.weights"]][["overlap"]][[9267]]
View(common_support)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(pacman)
p_load(tidyverse, data.table, stargazer, kableExtra, gridExtra, MatchIt, PSweight, AER,haven)
options(scipen = 999)
read_data <- function(df)
{
full_path <- paste("https://raw.github.com/scunning1975/mixtape/master/",
df, sep = "")
df <- read_dta(full_path)
return(df)
}
card <- read_data("card.dta")
#Define variable
#(Y1 = Dependent Variable, Y2 = endogenous variable, X1 = exogenous variable, X2 = Instrument)
attach(card)
Y1 <- lwage
Y2 <- educ
X1 <- cbind(exper, black, south, married, smsa)
X2 <- nearc4
#OLS
ols_reg <- lm(Y1 ~ Y2 + X1)
summary(ols_reg)
#2SLS
iv_reg = ivreg(Y1 ~ Y2 + X1 | X1 + X2)
summary(iv_reg)
read_data <- function(df)
{
full_path <- paste("https://raw.github.com/scunning1975/mixtape/master/",
df, sep = "")
df <- read_dta(full_path)
return(df)
}
card <- read_data("card.dta")
#Define variable
#(Y1 = Dependent Variable, Y2 = endogenous variable, X1 = exogenous variable, X2 = Instrument)
attach(card)
Y1 <- lwage
Y2 <- educ
X1 <- cbind(exper, black, south, married, smsa)
X2 <- nearc4
#OLS
ols_reg <- lm(Y1 ~ Y2 + X1)
summary(ols_reg)
#2SLS
iv_reg = ivreg(Y1 ~ Y2 + X1 | X1 + X2)
summary(iv_reg)
read_data <- function(df)
{
full_path <- paste("https://raw.github.com/scunning1975/mixtape/master/",
df, sep = "")
df <- read_dta(full_path)
return(df)
}
card <- read_data("card.dta")
#Define variable
#(Y1 = Dependent Variable, Y2 = endogenous variable, X1 = exogenous variable, X2 = Instrument)
attach(card)
Y1 <- lwage
Y2 <- educ
X1 <- cbind(exper, black, south, married, smsa)
X2 <- nearc4
#OLS
ols_reg <- lm(Y1 ~ Y2 + X1)
#2SLS
iv_reg = ivreg(Y1 ~ Y2 + X1 | X1 + X2)
#Show coef estimates
stargazer(ols_reg, iv_reg, type="text",
omit.table.layout = "sn", star.char = c("+", "*", "**", "***"),
star.cutoffs = c(0.1, 0.05, 0.01, 0.001))
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, kableExtra, foreign, MASS, plm, lmtest, stargazer)
# -------Import data-------
sibling_data <- read.dta("sibling_data.dta")
# -------OLS model-------
sibling_ols <- plm(data = sibling_data,
birthwt ~ stress + age + female + magebirth + numsibling + meduy + feduy,
index = c("householdid"),
model = "pooling")
# summary(sibling_ols)
# Another way to estimate the OLS:
# sibling_lm <- lm(data = sibling_data,
#                  birthwt ~ stress + age + female + magebirth + numsibling + meduy + feduy)
# -------Fixed effects-------
sibling_fe <- plm(data = sibling_data,
birthwt ~ stress + age + female + magebirth + numsibling + meduy + feduy,
index = c("householdid"),
model = "within")
# summary(sibling_fe)
# Examine fixed effect for each household ID: fixef(sibling_fe)
# -------Random effects-------
sibling_re <- plm(data = sibling_data,
birthwt ~ stress + age + female + magebirth + numsibling + meduy + feduy,
index = c("householdid"),
model = "random")
# summary(sibling_re)
# Examine random effect for each household ID: ranef(sibling_re)
# Summarize in a table
stargazer(sibling_ols, sibling_fe, sibling_re,
type = "latex",
star.char = c("*", "**", "***"),
star.cutoffs = c(0.1, 0.05, 0.01),
column.labels = c("OLS", "Fixed Effects", "Random Effects"),
dep.var.labels.include = FALSE)
