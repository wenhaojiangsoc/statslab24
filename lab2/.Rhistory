filter(year == 1952 | year == 2007) %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp, color = factor(year))) +
geom_point(alpha = 0.5) +
facet_grid(cols = vars(continent)) +
scale_color_discrete(name = "year", values=c("blue2","red2")) ## this line changes the legend title
# Arrange your plots as columns
gapminder %>%
filter(year == 1952 | year == 2007) %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp, color = factor(year))) +
geom_point(alpha = 0.5) +
facet_grid(cols = vars(continent)) +
scale_color_discrete(name = "year", value=c("blue2","red2")) ## this line changes the legend title
# Arrange your plots as columns
gapminder %>%
filter(year == 1952 | year == 2007) %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp, color = factor(year))) +
geom_point(alpha = 0.5) +
facet_grid(cols = vars(continent)) +
scale_color_discrete(name = "year") ## this line changes the legend title
gapminder %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp)) +
geom_point(shape = 1, alpha = 0.5) +
geom_smooth(method = "lm")
plot1 <- gapminder %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp)) +
geom_point(shape = 1, alpha = 0.5) +
geom_smooth(method = "lm")
plot2 <- gapminder %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp)) +
geom_point(shape = 1, alpha = 0.5) +
geom_smooth(method = "loess")
grid.arrange(plot1, plot2, ncol = 2)
grid.arrange(plot1, plot2, nrow = 2)
grid.arrange(plot1, plot2, plot1, plot2, ncol = 2)
# Let's add titles and optimize plot layout for the BRIC country GDP plot
gapminder %>%
filter(country %in% c("India", "Russia", "Brazil", "China")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line() +
labs(title = "GDP per capita in Brazil, China, and India (1952 to 2007)",
x = NULL,
y = "GDP per capita",
color = "Country") +
theme_bw() +
scale_color_grey() +
scale_x_continuous(breaks = unique(gapminder$year)) +
theme(axis.text.x = element_text(size = 8, angle = 40, vjust = 0.6))
# Let's add titles and optimize plot layout for the BRIC country GDP plot
gapminder %>%
filter(country %in% c("India", "Russia", "Brazil", "China")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line() +
labs(title = "GDP per capita in Brazil, China, and India (1952 to 2007)",
x = NULL,
y = "GDP per capita",
color = "Country") +
theme_classic() +
scale_color_grey() +
scale_x_continuous(breaks = unique(gapminder$year)) +
theme(axis.text.x = element_text(size = 8, angle = 40, vjust = 0.6))
gapminder %>%
filter(country %in% c("India", "Russia", "Brazil", "China")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line()
# Let's add titles and optimize plot layout for the BRIC country GDP plot
gapminder %>%
filter(country %in% c("India", "Russia", "Brazil", "China")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line() +
labs(title = "GDP per capita in Brazil, China, and India (1952 to 2007)",
x = NULL,
y = "GDP per capita",
color = "Country") +
theme_bw() +
scale_color_grey() +
scale_x_continuous(breaks = unique(gapminder$year)) +
theme(axis.text.x = element_text(size = 8, angle = 40, vjust = 0.6))
gapminder %>%
filter(country %in% c("India", "Russia", "Brazil", "China")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line()
unique(gapminder$year)
# Let's add titles and optimize plot layout for the BRIC country GDP plot
gapminder %>%
filter(country %in% c("India", "Russia", "Brazil", "China")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line() +
labs(title = "GDP per capita in Brazil, China, and India (1952 to 2007)",
x = NULL,
y = "GDP per capita",
color = "Country") +
theme_bw() +
scale_color_grey() +
scale_x_continuous(breaks = unique(gapminder$year)) +
theme(axis.text.x = element_text(size = 8, angle = 40, vjust = 0.6))
# Let's add titles and optimize plot layout for the BRIC country GDP plot
gapminder %>%
filter(country %in% c("India", "Russia", "Brazil", "China")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line() +
labs(title = "GDP per capita in Brazil, China, and India (1952 to 2007)",
x = NULL,
y = "GDP per capita",
color = "Country") +
theme_bw() +
scale_color_grey() +
scale_x_continuous(breaks = unique(gapminder$year)) +
theme(axis.text.x = element_text(size = 8, angle = 90, vjust = 0.6))
# Let's add titles and optimize plot layout for the BRIC country GDP plot
gapminder %>%
filter(country %in% c("India", "Russia", "Brazil", "China")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line() +
labs(title = "GDP per capita in Brazil, China, and India (1952 to 2007)",
x = NULL,
y = "GDP per capita",
color = "Country") +
theme_bw() +
scale_color_grey() +
scale_x_continuous(breaks = unique(gapminder$year)) +
theme(axis.text.x = element_text(size = 8, angle = 90, vjust = 0.6))
# To save a plot, add ggsave(filename = , plot = ) to save
# If you don't name the plot specifically, it automatically save the last plot you've run
# For example, since we just ran the above plot, we can save it:
ggsave("graph/gdp_bric.png")
# Your code here
gapminder %>%
filter(continent == "Europe") %>%
arrange(gdpPercap)
# Your code here
gapminder %>%
filter(continent == "Europe") %>%
arrange(desc(gdpPercap))
# Your code here
gapminder %>%
filter(continent == "Europe" & year == 2002) %>%
arrange(desc(gdpPercap))
# Your code here
gapminder %>%
filter(continent == "Europe" & year == 2002) %>%
arrange(desc(gdpPercap)) %>%
head(n=5)
# Your code here
gapminder %>%
filter(continent == "Europe") %>%
arrange(desc(gdpPercap)) %>%
head(n=5) ## or slice(1:5)
pop_binom <- rbinom(n = 100000, size = 1, p = 0.5)
# generate a random number that follows a Bernoulli distribution with p = 0.5
# then covert the vector to a data frame
pop_binom <- rbinom(n = 100000, size = 1, p = 0.5)
pop_binom %>%
# Convert vector to a tibble dataframe
as_tibble()
# plot the population
pop_binom %>%
# Convert vector to a tibble dataframe
as_tibble() %>%
ggplot(aes(x = value)) +
geom_histogram(color = "black", fill = "grey") +
labs(title = "Histogram of Simulated Population with Bernoulli Distribution",
subtitle = "N = 100000, p = 0.5",
x = "")
pop_binom %>%
# Sample from pop
sample(size = 10, replace = FALSE)
pop_binom %>%
sample(size = 100, replace = FALSE)
sample10 <- pop_binom %>%
# Sample from pop
sample(size = 10, replace = FALSE) %>%
# Convert to tidy data object
as_tibble() %>%
# Add a new variable called "sample_size" that equals to the sample size
mutate(sample_size = 10)
head(sample10)
# First create four df of random samples
set.seed(1)
pop_binom %>%
# Sample from pop
sample(size = 10, replace = FALSE)
sample100 <- pop_binom %>%
sample(size = 100, replace = FALSE) %>%
as_tibble() %>%
mutate(sample_size = 100)
sample1000 <- pop_binom %>%
sample(size = 1000, replace = FALSE) %>%
as_tibble() %>%
mutate(sample_size = 1000)
sample10000 <- pop_binom %>%
sample(size = 10000, replace = FALSE) %>%
as_tibble() %>%
mutate(sample_size = 10000)
# Combine df, recode variables (rbind stands for "row bind")
sample_df <- rbind(sample10, sample100, sample1000, sample10000)
View(sample_df)
# Plot
sample_df %>%
# Covert numeric variable to character variable (b/c we only have two possible outcomes)
mutate(value = as.character(value)) %>%
ggplot(aes(x = value, fill = value)) +
geom_bar(stat = "count", width = 0.5) +
facet_wrap(~sample_size, scales = "free") +
labs(title = "Sample Distribution for Different Sample Size")
for (i in 1:10){
print(i)
}
rep(NA, 100)
mean_container <- rep(NA, 100)
mean_container[1] <- 0.45
mean_container
set.seed(10010)
for (i in 1:100){
# Inside the for-loop, you first randomly sample 50 rows from the pop
sample <- sample(pop_binom, size = 50, replace = FALSE)
# Calculat the mean and save it as the i-th number in the vector
mean_container[i] <- mean(sample)
}
# Chek the result
head(mean_container, n = 10)
mean_container
# Mean and SD of the sampling distribution
mean = mean(mean_container)
sd_pos = mean + sd(mean_container)
sd_neg = mean - sd(mean_container)
# Plot
mean_container %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_histogram(binwidth = 0.01, fill = "grey", color = "black") +
geom_vline(aes(xintercept = sd_neg), color = "red") +
geom_vline(aes(xintercept = mean), color = "red", linetype = "dashed") +
geom_vline(aes(xintercept = sd_pos), color = "red") +
scale_x_continuous(limits=c(0, 1)) +
labs(title = "Sampling Distribution of the Sample Mean (100 iterations of sample n = 50)",
subtitle = "Mean marked by the dashed line, 1 standard deviation around the mean marked by solid lines")
# We create a "container" object to save the result
# It can be a vector, a matrix, a list, etc. as long as it fits your purpose
mean_container <- rep(NA, 10000)
mean_container[1] <- 0.45
mean_container
# For-loop
set.seed(10010)
for (i in 1:10000){
# Inside the for-loop, you first randomly sample 50 rows from the pop
sample <- sample(pop_binom, size = 50, replace = FALSE)
# Calculat the mean and save it as the i-th number in the vector
mean_container[i] <- mean(sample)
}
# Chek the result
head(mean_container, n = 10)
# We create a "container" object to save the result
# It can be a vector, a matrix, a list, etc. as long as it fits your purpose
mean_container <- rep(NA, 10000)
# For-loop
set.seed(10010)
for (i in 1:10000){
# Inside the for-loop, you first randomly sample 50 rows from the pop
sample <- sample(pop_binom, size = 50, replace = FALSE)
# Calculat the mean and save it as the i-th number in the vector
mean_container[i] <- mean(sample)
}
# Chek the result
head(mean_container, n = 10)
# Mean and SD of the sampling distribution
mean = mean(mean_container)
sd_pos = mean + sd(mean_container)
sd_neg = mean - sd(mean_container)
# Plot
mean_container %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_histogram(binwidth = 0.01, fill = "grey", color = "black") +
geom_vline(aes(xintercept = sd_neg), color = "red") +
geom_vline(aes(xintercept = mean), color = "red", linetype = "dashed") +
geom_vline(aes(xintercept = sd_pos), color = "red") +
scale_x_continuous(limits=c(0, 1)) +
labs(title = "Sampling Distribution of the Sample Mean (100 iterations of sample n = 50)",
subtitle = "Mean marked by the dashed line, 1 standard deviation around the mean marked by solid lines")
# Plot
mean_container %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_histogram(binwidth = 0.01, fill = "grey", color = "black") +
geom_vline(aes(xintercept = sd_neg), color = "red", linetype = "dashed") +
geom_vline(aes(xintercept = mean), color = "red", linetype = "solid") +
geom_vline(aes(xintercept = sd_pos), color = "red", linetype = "dashed") +
scale_x_continuous(limits=c(0, 1)) +
labs(title = "Sampling Distribution of the Sample Mean (100 iterations of sample n = 50)",
subtitle = "Mean marked by the dashed line, 1 standard deviation around the mean marked by solid lines")
rnorm(n = 10000, mean = 0, sd = 1)
?rnorm
knitr::opts_chunk$set(echo = TRUE)
# Load package to environment
library(tidyverse)
library(gridExtra)
library(kableExtra)
# Load csv files
gapminder <- read.csv("data/gapminder.csv")
set.seed(2023)
# generate population df
pop_norm <- rnorm(n = 10000, mean = 0, sd = 1)
# create a "container" object to save the mean
mean_vec <- rep(NA, 1000)
# repeatly sample from the pop df and save the mean
for (i in 1:1000){
sample <- pop_norm %>% sample(size = 100, replace = FALSE)
mean_vec[i] <- mean(sample$value)
}
# generate population df
pop_norm <- rnorm(n = 10000, mean = 0, sd = 1)
# create a "container" object to save the mean
mean_vec <- rep(NA, 1000)
# repeatly sample from the pop df and save the mean
for (i in 1:1000){
sample <- pop_norm %>% sample(size = 100, replace = FALSE)
mean_vec[i] <- mean(sample)
}
# Mean and SD of the sampling distribution
mean = mean(mean_vec)
sd_pos = mean + sd(mean_vec)
sd_neg = mean - sd(mean_vec)
# Plot
mean_vec %>%
as_tibble() %>%
ggplot(aes(value)) +
geom_histogram(binwidth = 0.01, fill = "grey", color = "black") +
geom_vline(aes(xintercept = sd_neg), color = "red") +
geom_vline(aes(xintercept = mean), color = "red", linetype = "dashed") +
geom_vline(aes(xintercept = sd_pos), color = "red") +
labs(title = "Sampling Distribution of the Sample Mean (1000 iterations of sample n = 100)",
subtitle = "Mean marked by the dashed line, 1 standard deviation around the mean marked by solid lines")
knitr::opts_chunk$set(echo = TRUE)
# Load package to environment
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(kableExtra)
# Load csv files
gapminder <- read.csv("data/gapminder.csv")
# set a seed to ensure your code is reproducible
# the seed number can be any number, and you should always run this line
# together with the code that involves generation of random numbers
set.seed(11011)
# generate a random number that follows a Bernoulli distribution with p = 0.5
# then covert the vector to a data frame
pop_binom <- rbinom(n = 100000, size = 1, p = 0.5)
## normal distribution
## rnorm(n = 10000, mean = 0, sd = 1)
# plot the population
pop_binom %>%
# Convert vector to a tibble dataframe
as.dataframe() %>%
ggplot(aes(x = value)) +
geom_histogram(color = "black", fill = "grey") +
labs(title = "Histogram of Simulated Population with Bernoulli Distribution",
subtitle = "N = 100000, p = 0.5",
x = "")
# plot the population
pop_binom %>%
# Convert vector to a tibble dataframe
as.data.frame() %>%
ggplot(aes(x = value)) +
geom_histogram(color = "black", fill = "grey") +
labs(title = "Histogram of Simulated Population with Bernoulli Distribution",
subtitle = "N = 100000, p = 0.5",
x = "")
pop_binom %>%
# Convert vector to a tibble dataframe
as.data.frame()
# plot the population
pop_binom %>%
# Convert vector to a tibble dataframe
as.data.frame() %>%
rename(value=.) %>%
ggplot(aes(x = value)) +
geom_histogram(color = "black", fill = "grey") +
labs(title = "Histogram of Simulated Population with Bernoulli Distribution",
subtitle = "N = 100000, p = 0.5",
x = "")
# plot the population
pop_binom %>%
# Convert vector to a tibble dataframe
as_tibble() %>%
ggplot(aes(x = value)) +
geom_histogram(color = "black", fill = "grey") +
labs(title = "Histogram of Simulated Population with Bernoulli Distribution",
subtitle = "N = 100000, p = 0.5",
x = "")
# Bar plot:
# For example, to check the number of countries with a life expectancy less than 60 over the years
gapminder %>%
filter(lifeExp <= 60) %>%
ggplot(aes(x = year)) +
geom_bar()
## the positions of the bar can be customized to "fill", "dodge", or "stack" (default)
gapminder %>%
filter(lifeExp <= 60) %>%
ggplot(aes(x = year, fill = continent)) +
geom_bar(position = "fill")
gapminder %>%
filter(lifeExp <= 60) %>%
ggplot(aes(x = year, fill = continent)) +
geom_bar(position = "dodge")
gapminder %>%
filter(lifeExp <= 60) %>%
ggplot() +
geom_bar(aes(x = year, fill = continent), position = "fill")
## you can use the "color" argument in aesthetic mapping to plot trend by group
## for example, if we want to compare GDP trend over years for BRIC countries:
gapminder %>%
filter(country %in% c("India", "Russia", "Brazil", "China")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line()
unique
unique(gapminder$country)
## you can use the "color" argument in aesthetic mapping to plot trend by group
## for example, if we want to compare GDP trend over years for North American countries:
gapminder %>%
filter(country %in% c("United States","Mexico","Canada")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line()
## if we fit the data with linear models
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(shape = 1, alpha = 0.5) +
geom_smooth(method = "lm")
# If we fit the data with a nonlinear assumption,
# There are various smoothing method you can choose from. See documentation for details.
gapminder %>%
ggplot(aes(x = gdpPercap, y = lifeExp)) +
geom_point(shape = 1, alpha = 0.5) +
geom_smooth(method = "loess")
## let's try with the log(gdpPercap)
gapminder %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp)) +
geom_point(shape = 1, alpha = 0.5) +
geom_smooth(method = "lm")
gapminder %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp)) +
geom_point(shape = 1, alpha = 0.5) +
geom_smooth(method = "loess")
## for example, if we want to compare how the relationship between
## lifeExp and gdpPercap have changed from 1952 to 2007 in five continents:
gapminder %>%
filter(year == 1952 | year == 2007) %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp, color = factor(year))) +
geom_point(alpha = 0.5) +
facet_wrap(vars(continent))
# Arrange your plots as rows
gapminder %>%
filter(year == 1952 | year == 2007) %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp, color = factor(year))) +
geom_point(alpha = 0.5) +
facet_grid(rows = vars(continent))
# Arrange your plots as columns
gapminder %>%
filter(year == 1952 | year == 2007) %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp, color = factor(year))) +
geom_point(alpha = 0.5) +
facet_grid(cols = vars(continent)) +
scale_color_discrete(name = "year") ## this line changes the legend title
## for example, if we want to compare how the relationship between
## lifeExp and gdpPercap have changed from 1952 to 2007 in five continents:
gapminder %>%
filter(year == 1952 | year == 2007) %>%
ggplot(aes(x = log(gdpPercap), y = lifeExp, color = factor(year))) +
geom_point(alpha = 0.5) +
facet_wrap(vars(continent))
# Let's add titles and optimize plot layout for the BRIC country GDP plot
gapminder %>%
filter(country %in% c("India", "Russia", "Brazil", "China")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line() +
labs(title = "GDP per capita in Brazil, China, and India (1952 to 2007)",
x = NULL,
y = "GDP per capita",
color = "Country") +
theme_bw() +
scale_color_grey() +
scale_x_continuous(breaks = unique(gapminder$year)) +
theme(axis.text.x = element_text(size = 8, angle = 90, vjust = 0.6))
## let's add titles and optimize plot layout for North American country GDP plot
gapminder %>%
filter(country %in% c("United States","Mexico","Canada")) %>%
ggplot(aes(x = year, y = gdpPercap, color = country)) +
geom_point() +
geom_line() +
labs(title = "GDP per capita (1952 to 2007)",
x = NULL,
y = "GDP per capita",
color = "Country") +
theme_bw() +
scale_color_grey() +
scale_x_continuous(breaks = unique(gapminder$year)) +
theme(axis.text.x = element_text(size = 8, angle = 90, vjust = 0.6))
## your code here
gapminder %>%
filter(continent == "Europe" & year == 2002) %>%
arrange(desc(gdpPercap)) %>%
head(n=5) ## or slice(1:5)
