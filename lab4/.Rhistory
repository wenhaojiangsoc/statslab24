install.packages('ipumsr')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(kableExtra)
library(ipumsr)
# Value of x and y are observed
x <- c(-2, 0, 3, 6, 10)
y <- c(-1, 8, 15, 12, 28)
# Create a dataframe of x and y
ols_df <- tibble(
x = x,
y = y
)
# Check dataframe
ols_df %>% kbl("html") %>% kable_classic_2(full_width = F)
# Scatter plot of x and y
ols_df %>%
ggplot() +
geom_point(aes(x, y), shape = 1) +
labs(title = "Scatterplot of Example Data")
View(ols_df)
sum(x-mean(x)*(y-mean(y)))/sum((x-mean(x))^2)
sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2)
## beta 0
mean(y) - beta1*mean(x)
## beta 1
beta1 <- sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2)
## beta 0
mean(y) - beta1*mean(x)
sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2)
cov(x,y)/var(x)
# Your code here
cor(x,y)*sd(y)/sd(x)
## beta 1
beta1 <- sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2)
## beta 0
beta0 <- mean(y) - beta1*mean(x)
# Your code here
ols_df
# Your code here
beta0 + beta1*x
ols_df
# Your code here
ols_df %>%
mutate(fitted_y = beta0 + beta1*x)
# Your code here
ols_df <-
ols_df %>%
mutate(fitted_y = beta0 + beta1*x)
# Your code here
ols_df
# Your code here
sum(
(ols_df$y - ols_df$fitted_y)^2
)
sum(
(ols_df$y - (beta0 + beta1*ols_df$x))^2
)
plot <-
ols_df %>%
ggplot() +
geom_point(aes(x, y), shape = 1) +
labs(title = "Scatterplot of Example Data")
# Your code here
plot +
geom_abline(intercept = beta0, slope = beta1)
lm(y ~ x)
ols_m1 <- lm(y ~ x, data = ols_df)
# check model result
ols_m1
# for details, use the summary() function
summary(ols_m1)
ols_df$y - ols_df$fitted_y
# for details, use the summary() function
summary(ols_m1)
ols_m1$residuals
# the SSE is not directly displayed, but we can calculate it by its definition
sum(ols_m1$residuals^2)
sum(
(ols_df$y - (beta0 + beta1*ols_df$x))^2
)
# estimate a linear model
ols_m1 <- lm(y ~ x1, data = ols_df)
# Your code here
# NOTE: To load data, you must download both the extract's data and the DDI
# and also set the working directory to the folder with these files (or change the path below).
if (!require("ipumsr")) stop("Reading IPUMS data into R requires the ipumsr package. It can be installed using the following command: install.packages('ipumsr')")
ddi <- read_ipums_ddi("data/usa_00043.xml")
data <- read_ipums_micro(ddi)
View(data)
str(data$SEX)
str(data$INCWAGE)
# Load ipums data
ddi <- read_ipums_ddi("data/usa_00043.xml")
data <- read_ipums_micro(ddi)
# View first 10 rows
head(data, n = 10) %>% kbl("html") %>% kable_classic_2(full_width = T)
# Create a new variable called "unique_id"
data_clean <- data_clean %>%
unite("unique_id",                # The name of the new column, as a string or symbol
SAMPLE, SERIAL, PERNUM,     # Columns to unite
sep = "",                   # Separator to use between values
remove = TRUE)              # Remove input columns from output data frame
# Select variables
data_clean <- data %>%
select(SAMPLE, SERIAL, PERNUM, PERWT, SEX, EDUC, INCWAGE)
# View first 10 rows
head(data_clean, n = 10) %>% kbl("html") %>% kable_classic_2(full_width = T)
# Create a new variable called "unique_id"
data_clean <- data_clean %>%
unite("unique_id",                # The name of the new column, as a string or symbol
SAMPLE, SERIAL, PERNUM,     # Columns to unite
sep = "",                   # Separator to use between values
remove = TRUE)              # Remove input columns from output data frame
n_distinct(data_clean$unique_id)
# this should equal to:
nrow(data_clean)
data_clean %>%
mutate(unique_id =
paste0(SAMPLE, SERIAL, PERNUM))
# Select variables
data_clean <- data %>%
select(SAMPLE, SERIAL, PERNUM, PERWT, SEX, EDUC, INCWAGE)
data_clean %>%
mutate(unique_id =
paste0(SAMPLE, SERIAL, PERNUM))
table
table(data_clean$EDUC)
# Check distribution of INCWAGE
data_clean %>%
ggplot() +
geom_histogram(aes(INCWAGE), binwidth = 15000, color = "black", fill = "grey")
# Check distribution of INCWAGE
data_clean %>%
ggplot() +
geom_histogram(aes(INCWAGE), binwidth = 15000, color = "black", fill = "grey")
# Remove missing value use filter()
data_clean <- data_clean %>%
filter(EDUC != 0 & INCWAGE < 999998)
# Check distribution after removing missing values
# EDUC
table(data_clean$EDUC)
# INCWAGE
data_clean %>%
ggplot() +
geom_histogram(aes(INCWAGE), binwidth = 15000, color = "black", fill = "grey")
# Your code here
model_ipums <- lm(INCWAGE ~ EDUC, data_clean)
summary(model_ipums)
# Your code here
data_clean %>%
ggplot() +
geom_point(aes(EDUC, INCWAGE)) +
labs(title = "Scatterplot of Education and Wage Income",
subtitle = "NA and missing values are removed, n = 17,322")
# Your code here
data_clean %>%
ggplot() +
geom_point(aes(EDUC, INCWAGE)) +
labs(title = "Scatterplot of Education and Wage Income",
subtitle = "NA and missing values are removed, n = 17,322") +
geom_smooth(aes(x = EDUC, y = INCWAGE), method = "lm")
# Your code here
data_clean %>%
ggplot() +
geom_point(aes(EDUC, INCWAGE)) +
labs(title = "Scatterplot of Education and Wage Income",
subtitle = "NA and missing values are removed, n = 17,322") +
geom_smooth(aes(x = EDUC, y = INCWAGE), method = "loess")
# Your code here
data_clean %>%
ggplot() +
geom_point(aes(EDUC, INCWAGE)) +
labs(title = "Scatterplot of Education and Wage Income",
subtitle = "NA and missing values are removed, n = 17,322") +
geom_smooth(aes(x = EDUC, y = INCWAGE), method = "lm")
# Your code here
data_clean %>%
ggplot() +
geom_point(aes(EDUC, INCWAGE)) +
labs(title = "Scatterplot of Education and Wage Income",
subtitle = "NA and missing values are removed, n = 17,322") +
geom_smooth(aes(x = EDUC, y = INCWAGE), method = "lm")
# Your code here
model_ipums$residuals
# Your code here
plot(data$EDUC , model_ipums$residuals)
# Your code here
plot(data_clean$EDUC , model_ipums$residuals)
# Your code here
plot(model_ipums$fitted.values, model_ipums$residuals)
t <- NA
t[1] <- 1
t
t[2] <- 34
t
